add.article("","Harvey Wallbanger: History","Wikipedia","en.wikipedia.org","2015-01-19","Turtle")
artiquote(529,"appears in literature as early as 1971")
artiquote(529,"reported to have been invented in 1952...")
artiquote(529,"...by three-time world champion mixologist Donato "Duke" Antone (Paolantonio)")
artiquote(529,"...by three-time world champion mixologist Donato 'Duke' Antone (Paolantonio)")
artiquote(529,"promotional efforts of George Bednar...")
artiquote(529,"...former football player and Galliano sales manager based in California")
artiquote(529,"named after a Manhattan Beach surfer...regular patron of Duke's Blackwatch Bar...early 1950s")
add.article("","Harvey Wallbanger: Other Uses","Wikipedia","en.wikipedia.org","2015-01-19","Turtle")
artiquote(530,"The 1982 Milwaukee Brewers...were nicknamed 'Harvey's Wallbangers'")
artiquote(530,"Harvey Wallbanger is sometimes used to refer to the Wall Follower maze solving algorithm.")
artiquote(530,"In CB lingo, a Harvey Wallbanger is a drunk driver; specifically, ")
artiquote(530,"one who continually drifts across the road from one shoulder to the other and back.")
add.article("","Kansas City, Missouri","Wikipedia","en.wikipedia.org","2015-01-19","Turtle")
artiquote(531,"most populous city in the U.S. state of Missouri.")
artiquote(531,"one of two county seats of Jackson County, along with Independence.")
artiquote(531,"Founded in the 1830s as a port on the Missouri River, Kansas City experienced clashes over slavery in")
artiquote(531,"in the Border War which preceded the American Civil War")
artiquote(531,"and in The Civil War itself, including the Battle of Westport.")
artiquote(531,"The 18th and Vine Neighborhood...Kansas City jazz and Kansas City blues.")
add.article("","Battle of Westport","Wikipedia","en.wikipedia.org","2015-01-19","Turtle")
artiquote(532,"Date: October 23, 1864")
artiquote(532,"Union commander: Samuel R. Curtis")
artiquote(532,"Confederate commander: Sterling Price")
artiquote(532,"Union unit: Army of the Border")
artiquote(532,"Confederate unit: Army of Missouri")
artiquote(532,"Union strength: 22,000; Confederate strength: 8,500")
artiquote(532,"Union casualties: 1,500; Confederate casualties: 1,500")
artiquote(532,"sometimes referred to as the 'Gettysburg of the West,'")
artiquote(532,"turning point of Price's Missouri Expedition, forcing his army to retreat ")
artiquote(532,"ending the last significant Confederate operation west of the Mississippi River.")
add.article("","Battle of Westport: Noteworthy Participants","Wikipedia","en.wikipedia.org","2015-01-19","Turtle")
artiquote(533," Frederick Benteen...would subsequently fight with George Custer at...Little Bighorn.")
artiquote(533,"Mountain man John "Liver Eating" Johnson...fought for the Union at the Battle of Westport.")
artiquote(533,"Mountain man John 'Liver Eating' Johnson...fought for the Union at the Battle of Westport.")
artiquote(533,"Three Union officers at Westport later served as post-war state governors:")
artiquote(533,"Samuel J. Crawford served as governor of Kansas")
artiquote(533,"John Lourie Beveridge became governor of Illinois.")
artiquote(533,"Thomas Theodore Crittenden served as governor of Missouri...later buried in Forest Hill Cemetery")
artiquote(533,"Senators Jim Lane and Samuel C. Pomeroy served on Curtis's staff")
artiquote(533,"Former lieutenant governor Thomas C. Reynolds joined Gen. Price's staff, ")
artiquote(533,"in hopes that Price's army might capture Jefferson City and install him as governor")
add.article("John Scheibe, Kathleen Wilson","Homeless man set on fire in Ventura while sleeping","Ventura County Star","vcstar.com","2015-01-18","Turtle")
artiquote(534,"A 58-year-old man was hospitalized in Los Angeles on Sunday with second- and ")
artiquote(534,"third-degree burns after being set on fire at a beach in Ventura late Saturday")
artiquote(534,"asleep in his sleeping bag on the beach...")
artiquote(534,"...awoke because three males had poured lighter fluid on him and lit him on fire.")
artiquote(534,"in their late teens or early 20s with shaved heads and dressed in dark clothing")
artiquote(534,"a person who found the victim and reported the incident to police said he saw flames five- to six-feet high.")
artiquote(534,"The man’s entire torso was set on fire, authorities said.")
artiquote(534,"The individual used sand to extinguish the fire before calling for help")
artiquote(534,"Advocates for the homeless reacted Sunday, saying the incident, unfortunately,")
artiquote(534,"isn’t isolated and stems from a skewed perception of the homeless as unworthy of compassion.")
artiquote(534,"society as a whole often views the homeless as almost subhuman")
artiquote(534,"seen as no better than trash...inconvenience...eyesore...to be dispossessed of.")
artiquote(534,"objects of fear, derision and scorn,")
artiquote(534,"What often goes unrealized...many people who have a roof over their head ")
artiquote(534,"are often just a paycheck or disaster away from being homeless themselves.")
artiquote(534,"The outrage and the willingness to help has to be the same for vulnerable people...")
artiquote(534,"...as it is for animals,")
artiquote(534,"you can’t give them [burn victims] enough pain killers to takeaway the pain")
artiquote(534,"Even something like a sneeze or a cough can cause unbearable pain")
add.article("Peter Rowe and John Wilkens","Can SD move past Muslim stereotypes?","UT San Diego","utsandiego.com","2015-01-17","Turtle")
artiquote(535,"They teach in public schools and universities, run nonprofits, sell insurance...")
artiquote(535,", follow U.S. — not sharia — law.")
artiquote(535,"Proud of their faith, they insist that Islam’s tenets of peace and justice...")
artiquote(535,".. have been perverted by terrorists.")
artiquote(535,"Terrorists who sometimes have had local ties.")
artiquote(535,"Two of the 19 Muslims who hijacked planes on Sept. 11, 2001, ")
artiquote(535,"were Saudis who lived and trained in San Diego.")
artiquote(535,"Anwar al-Awaki, was known for his gentle, reasonable faith. ")
artiquote(535,"years later, he emerged in Yemen as an al-Qaeda leader.")
artiquote(535,"his teachings were credited with inspiring the brutal attacks in Paris.")
artiquote(535,"Why should I bear the cross, if I may use a Christian expression, for a few Muslims who act like idiots?")
add.note2
print(
as.character(
unique(
read.csv("C:/Users/Josh/Documents/CSV Personal/notes2.csv")$category
)
)
)
add.article("DANIEL GOLDSTEIN","10 things the college admissions office won’t tell you","Market Watch","marketwatch.com","2015-01-17","Editor's Picks - Market Watch")
artiquote(536,"If the application essay looks like it was written by Maya Angelou...")
artiquote(536,"... and the school work looks like Willy Loman’s")
artiquote(536,"the most useful recommendations show that the student is intellectually curious...")
artiquote(536," ...and contributes to class discussions")
artiquote(536,"‘How does the student respond to setbacks, how does the student interact in teams?")
artiquote(536,"Politics may determine whether you get in")
artiquote(536,"We’d rather admit someone who can pay full price")
artiquote(536,"higher tuition for out-of-state students often helps subsidize education for state residents")
artiquote(536,"Many universities look to international students as a panacea to their financial ills")
artiquote(536,"they hired someone to do the interview for them")
artiquote(536,"I didn’t get into admissions to become a police officer, but that’s what the job requires now.”)
"
)
artiquote(536,"We need you more than you need us")
artiquote(536,"more colleges will be chasing after fewer students.")
artiquote(536,"The public believes that it’s so hard to get into college,")
artiquote(536,"the reality is that most colleges are scrambling to find applicants to fill out freshman classes")
artiquote(536,"students who get into more than one school may be able to do some horse-trading on tuition")
artiquote(536,"just like going to the dealer and negotiating a better rate for your new car")
artiquote(536,"Just because you get admitted doesn’t mean you’ll stay admitted")
artiquote(536,"senioritis-impacted final grades (65%), ")
artiquote(536,"disciplinary issues (35%) and falsification of application information (29%).")
artiquote(536,"found to be harassing a high-school teacher on Facebook...pulled the admissions letter")
artiquote(536,"I got hateful tweets, but we are in an uber-selective environment.")
artiquote(536,"The bottom line is that the schools are trying to protect themselves.")
add.article("MarketWatch","Twelve money-saving travel secrets from experts","Market Watch","marketwatch.com","2015-01-19","Editor's Picks - Market Watch")
artiquote(537,"Try calling the airline instead of booking online")
artiquote(537,"Clear your computer’s cookies and cache")
artiquote(537,"Try shopping without frequent flier numbers")
artiquote(537,"Delta offered me a fare for $529 and then I went put in my frequent flyer number,")
artiquote(537,"the fare suddenly jumped to $607,")
artiquote(537,"Try the train - Amtrak's 15 day go-anywhere deal")
artiquote(537,"Exploit the cruise industry’s bad publicity")
artiquote(537,"Call the hotel directly")
artiquote(537,"Try other hotel booking sites")
artiquote(537,"Consider alternative lodging")
artiquote(537,"Watch out for travel-offer scams")
artiquote(537,"Don’t rent without a live conversation")
artiquote(537,"Visit countries where few Americans vacation")
artiquote(537,"Go where the local currency has been pounded")
add.article("Charles Passy","10 things car dealers won’t tell you","Market Watch","marketwatch.com","2015-01-19","Editor's Picks - Market Watch")
artiquote(538,"Welcome to McDealer")
artiquote(538,"Those deals in our ads may really be too good to be true")
artiquote(538,"The best deals aren’t in our showroom")
artiquote(538,"We’re selling you a car so we can sell you something else")
artiquote(538,"We’d much rather steer you to our used-car lot")
artiquote(538,"We push options you may not need")
artiquote(538,"Your final price is not always so final")
artiquote(538,"Our ‘veterans’ haven’t been around that long")
artiquote(538,"Pardon our dust")
artiquote(538,"Tesla is challenging our way of doing business")
artiquote(538,"selling direct to consumers with no dealer involved")
artiquote(538,"'It does not seem right to me that companies...")
artiquote(538,"...try to make a profit off customers when their product breaks,'- Elon Musk")
add.article("Kevin McSpadden","Richest 1% to Boast More Wealth Than Rest of World by 2016","Time","time.com","2015-01-19","Editor's Picks - Time")
artiquote(539,"1 in 9 people does not have enough to eat")
artiquote(539,"more than a billion people still live on less than $1.25 per day.")
artiquote(539,"In 2014, the bottom 80% controlled only 5.5% of the world's wealth")
add.article("Simon Worrall","From Campfire to Haute Cuisine: How Food and Flavor Drove Human Evolution","National Geographic","news.nationalgeographic.com","2015-01-18","Spotlight")
add.article("Simon Worrall","Is Genius Smarter Than Past Attempts to Annotate the Web?","MIT","technologyreview.com","2015-01-10","Spotlight")
add.article("Tom Simonite","Is Genius Smarter Than Past Attempts to Annotate the Web?","MIT","technologyreview.com","2015-01-10","Spotlight")
add.article("SIMONE PATHE","The wealthiest are getting wealthier, and lobbying has a lot to do with it","PBS NewsHour","pbs.org","2015-01-19","Spotlight")
add.article("","Wealth: Having It All and Wanting More","Oxfam International","oxfam.org","2015-01-19","Simone Pathe")
coursera.note
coursera<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv",colClasses="character"))
View(coursera)
wandering_wifi<-c("User Agreement")
rm(wandering_wifi)
add.note("Terms: DO NOT CONNECT TO THE INTERNET USING THE WANDERING WIFI SERVICES IF YOU DO NOT INTEND")
add.note("Terms: TO BE LEGALLY BOUND TO THESE TERMS OF SERVICE.")
add.note("Terms: form and nature of the Services may change from time to time without prior notice")
week<-1
coursera<-cbind(coursera,week)
View(coursera)
write.csv(coursera, "C:/Users/Josh/Documents/CSV Personal/coursera.csv", row.names=FALSE)
coursera.note<-function(note, course, category,week,time=Sys.time(),validity=NA){
X<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv",colClasses="character"))
rw<-nrow(X)+1
Y<-as.matrix(data.frame(rw,note,time,course,category,validity,week))
Z<-rbind(X,Y)
write.csv(Z, "C:/Users/Josh/Documents/CSV Personal/coursera.csv", row.names=FALSE)
print(tail(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv"),3))
}
coursera.note("02-01 1/14: Reading mySQL","getdata","gitpdf",1)
coursera.note("02-01 2/14: free & widely used opensource database software","getdata","gitpdf",1)
coursera.note("02-01 2/14: widely used in internet applications","getdata","gitpdf",1)
coursera.note("02-01 2/14: Data are structured in Databases, Tables within Databases, and Fields within Tables","getdata","gitpdf",1)
coursera.note("02-01 2/14: Each row is called a record","getdata","gitpdf",1)
coursera.note("02-01 2/14: http://en.wikipedia.org/wiki/mySQL","getdata","gitpdf",1)
coursera.note("02-01 2/14: http://www.mySQL.com/","getdata","gitpdf",1)
coursera.note("02-01 3/14: Example Structure: titles-employees-dept_manager-departments-dept_emp-employees-salaries","getdata","gitpdf",2)
coursera.note("02-01 3/14: Example Structure: http://dev.mysql.com/doc/employee/en/sakila-structure.html","getdata","gitpdf",2)
coursera.note("02-01 4/14: step 1: Install MySQL http://dev.mysql.com/doc/refman/5.7/en/installing.html","getdata","gitpdf",2)
coursera.note("02-01 5/14: step 2: Install MySQL on a Mac - install.packages('RMySQL')","getdata","gitpdf",2)
coursera.note("02-01 5/14: step 2: Install MySQL on Windows official instructions - http://biostat.mc.vanderbilt.edu/wiki/main/RMySQL","getdata","gitpdf",2)
coursera.note("02-01 5/14: step 2: Install MySQL on Windows potentially useful:","getdata","gitpdf",2)
coursera.note("02-01 5/14: http://www.auschulz.de/2013/07/23/installing-rmysql-under-windows/","getdata","gitpdf",2)
coursera.note("02-01 6/14: Example - UCSC Database: http://genome.ucsc.edu","getdata","gitpdf",2)
category<-"gitpdf"
week<-2
course<-"getdata"
coursera.note<-function(note, course=course, category=category,week=week,time=Sys.time(),validity=NA){
X<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv",colClasses="character"))
rw<-nrow(X)+1
Y<-as.matrix(data.frame(rw,note,time,course,category,validity,week))
Z<-rbind(X,Y)
write.csv(Z, "C:/Users/Josh/Documents/CSV Personal/coursera.csv", row.names=FALSE)
print(tail(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv"),3))
}
coursera.note("02-01 7/14: UCSC MySQL: http://genome.ucsc.edu/goldenPath/help/mysql.html")
coursera.note<-function(note, course, category,week,time=Sys.time(),validity=NA){
X<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv",colClasses="character"))
rw<-nrow(X)+1
Y<-as.matrix(data.frame(rw,note,time,course,category,validity,week))
Z<-rbind(X,Y)
write.csv(Z, "C:/Users/Josh/Documents/CSV Personal/coursera.csv", row.names=FALSE)
print(tail(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv"),3))
}
coursera.note("02-01 7/14: UCSC MySQL: http://genome.ucsc.edu/goldenPath/help/mysql.html")
add.note2
print(
as.character(
unique(
read.csv("C:/Users/Josh/Documents/CSV Personal/notes2.csv")$category
)
)
)
add.note2("rstudio","Error in data.frame(rw, note, time, course, category, validity, week) : ...")
add.note2("rstudio","...promise already under evaluation: recursive default argument reference or earlier problems? ")
add.note2("rstudio","Error ...argument 'course' is missing, with no default ")
coursera.note("02-01 7/14: UCSC MySQL: http://genome.ucsc.edu/goldenPath/help/mysql.html","getdata","gitpdf",2)
coursera.note("02-01 8/14: Connecting and Listing Databases","getdata","gitpdf",2)
coursera.note("02-01 8/14: ucscDb<-dbConnect(MySQL(),user='genome',","getdata","gitpdf",2)
coursera.note("02-01 8/14: host='genome-mysql.cse.ucsc.edu)","getdata","gitpdf",2)
?dbConnect
coursera.note("02-01 8/14: result<-dbGetQuery(ucscDb,'show databases;'); dbDisconnect(ucscDb);","getdata","gitpdf",2)
coursera.note("02-01 9/14: Connecting to hg19 and listing tables","getdata","gitpdf",2)
clock("right")
clock("left")
add.note2("health","hydration test: passed")
add.note2("health","sleepy after hydration test - dehydration?")
add.note("idea: start basing new note columns off wikipedia portals")
?row
?obs
?time
?note
add.note<-function(note,Time=Sys.time()){
note<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/notes.csv",colClasses="character"))
obs<-as.matrix(data.frame(note,Time))
note<-rbind(note,obs)
write.csv(Z,"C:/Users/Josh/Documents/CSV Personal/notes.csv",row.names=FALSE)
print(tail(note,3))
}
add.note("testing note update")
note<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/notes.csv",colClasses="character"))
ncol(note)
obs<-as.matrix(data.frame(note,Time))
Time<-Sys.time()
obs<-as.matrix(data.frame(note,Time))
ncol(obs)
data.frame(note,Time)
add.note<-function(note,Time=Sys.time()){
notes<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/notes.csv",colClasses="character"))
obs<-as.matrix(data.frame(note,Time))
notes<-rbind(notes,obs)
write.csv(Z,"C:/Users/Josh/Documents/CSV Personal/notes.csv",row.names=FALSE)
print(tail(note,3))
}
add.note("testing note update")
add.note<-function(note,Time=Sys.time()){
notes<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/notes.csv",colClasses="character"))
obs<-as.matrix(data.frame(note,Time))
notes<-rbind(notes,obs)
write.csv(notes,"C:/Users/Josh/Documents/CSV Personal/notes.csv",row.names=FALSE)
print(tail(note,3))
}
add.note("testing note update")
add.note<-function(note,Time=Sys.time()){
notes<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/notes.csv",colClasses="character"))
obs<-as.matrix(data.frame(note,Time))
notes<-rbind(notes,obs)
write.csv(notes,"C:/Users/Josh/Documents/CSV Personal/notes.csv",row.names=FALSE)
print(tail(notes,3))
}
add.note("testing note update")
coursera.note("02-01 9/14: hg19<-dbConnect(MySQL(),user='genome',db='hg19', ","getdata","gitpdf",2)
coursera.note("02-01 9/14: host='genome-mysql.cse.ucsc.edu')","getdata","gitpdf",2)
coursera.note("02-01 9/14: allTables<-dbListTables(hg19)","getdata","gitpdf",2)
coursera.note("02-01 9/14: length(allTables) = 10949","getdata","gitpdf",2)
coursera.note("02-01 9/14: allTables[1:5]","getdata","gitpdf",2)
coursera.note("02-01 10/14: Get dimensions of a specific table","getdata","gitpdf",2)
coursera.note("02-01 10/14: dbListFields(hg19,'affyU133Plus2') - length is 22","getdata","gitpdf",2)
coursera.note("02-01 10/14: dbGetQuery(hg19,'select count(*) from affyU133Plus2')","getdata","gitpdf",2)
coursera.note("02-01 10/14: count (*) -> 58463","getdata","gitpdf",2)
coursera.note("02-01 11/14: Read data from the table","getdata","gitpdf",2)
coursera.note("02-01 11/14: affyData<-dbReadTable(hg19,'affyU133Plus2')","getdata","gitpdf",2)
coursera.note("02-01 12/14: Select a specific subset","getdata","gitpdf",2)
coursera.note("02-01 12/14: query<-dbSendQuery(hg19,'select*from ","getdata","gitpdf",2)
coursera.note("02-01 12/14: affyU133Plus2 where misMatches between 1 and 3')","getdata","gitpdf",2)
coursera.note("02-01 12/14: affyMis<-fetch(query); quantile(affyMis$misMatches)","getdata","gitpdf",2)
coursera.note("02-01 12/14: affyMisSmall<-fetch(query,n=10); dbClearResult(query);","getdata","gitpdf",2)
add.note2("health","hydration - warm thermos. Wide awake - supports dehydration idea.")
coursera.note("02-01 12/14: dim(affyMisSmall) = 10 22","getdata","gitpdf",2)
coursera.note("02-01 13/14: Don't forget to close the connection!","getdata","gitpdf",2)
coursera.note("02-01 13/14: dbDisconnect(hg19)","getdata","gitpdf",2)
coursera.note("02-01 14/14: Further Resources:","getdata","gitpdf",2)
coursera.note("02-01 14/14: RMySQL vignette http://cran.r-project.org/web/packages/RMySQL/RMySQL.pdf","getdata","gitpdf",2)
coursera.note("02-01 14/14: List of commands http://www.pantz.org/software/mysql/mysqlcommands.html","getdata","gitpdf",2)
coursera.note("02-01 14/14: Do not, do not, delete, add, or join things from ensemble. Only select.","getdata","gitpdf",2)
coursera.note("02-01 14/14: In general be careful with mysql commands.","getdata","gitpdf",2)
coursera.note("02-01 14/14: Some other commands: http://www.r-bloggers.com/mysql-and-r/","getdata","gitpdf",2)
coursera.note("02-02 1/9: Reading hdf5","getdata","gitpdf",2)
coursera.note("02-02 1/9: hdf5 used for storing large data sets.","getdata","gitpdf",2)
coursera.note("02-02 2/9: hdf5 used for storing large data sets.","getdata","gitpdf",2)
coursera.note("02-02 2/9: hdf5 supports storing a range of data types.","getdata","gitpdf",2)
coursera.note("02-02 2/9: hdf5 has a hierarchical data format.","getdata","gitpdf",2)
coursera.note("02-02 2/9: groups containing zero or more data sets and metadata","getdata","gitpdf",2)
coursera.note("02-02 2/9: have a group header with group name and list of attributes","getdata","gitpdf",2)
coursera.note("02-02 2/9: have a group symbol table with a list of objects in group.","getdata","gitpdf",2)
coursera.note("02-02 2/9: datasets multidimensional array of data elements with metadata","getdata","gitpdf",2)
coursera.note("02-02 2/9: header with name, datatype, dataspace, storage layout","getdata","gitpdf",2)
coursera.note("02-02 2/9: data array with the data","getdata","gitpdf",2)
coursera.note("02-02 2/9: http://www.hdfgroup.org/","getdata","gitpdf",2)
coursera.note("02-02 3/9: R HDF5 package","getdata","gitpdf",2)
coursera.note("02-02 3/9: source('http://bioconductor.org/biocLite.R')","getdata","gitpdf",2)
coursera.note("02-02 3/9: biocLite.R('fhdf5')","getdata","gitpdf",2)
coursera.note("02-02 3/9: biocLite.R('rhdf5')","getdata","gitpdf",2)
coursera.note("02-02 3/9: library(rhdf5); created = h5createFile('example.h5')","getdata","gitpdf",2)
coursera.note("02-02 3/9: This will install packages from Bioconductor http://bioconductor.org/, ","getdata","gitpdf",2)
coursera.note("02-02 3/9: primarily used for genomics but also has good 'big data' packages.","getdata","gitpdf",2)
coursera.note("02-02 3/9: Can be used to interface with hdf5 data sets.","getdata","gitpdf",2)
coursera.note("02-02 3/9: This lectures is modified very closely on the rhdf5 tutorial that can be found here:","getdata","gitpdf",2)
coursera.note("02-02 3/9: http://www.bioconductor.org/packages/release/bioc/vignettes/rhdf5/inst/doc/rhdf5.pdf","getdata","gitpdf",2)
coursera.note("02-02 4/9: Create Groups: created = h5createGroup('example.h5','foo')","getdata","gitpdf",2)
coursera.note("02-02 4/9: Create Groups: created = h5createGroup('example.h5','baa')","getdata","gitpdf",2)
coursera.note("02-02 4/9: Create Groups: created = h5createGroup('example.h5','foo/foobaa')","getdata","gitpdf",2)
coursera.note("02-02 4/9: Create Groups: h5ls('example.h5')","getdata","gitpdf",2)
coursera.note("02-02 5/9: Write to Groups: A = matrix(1:10,nr=5,nc=2)","getdata","gitpdf",2)
coursera.note("02-02 5/9: Write to Groups: h5write(A,'example.h5','foo/A')","getdata","gitpdf",2)
coursera.note("02-02 5/9: Write to Groups: B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))","getdata","gitpdf",2)
coursera.note("02-02 5/9: Write to Groups: attr(B,'scale')<-'litter'","getdata","gitpdf",2)
coursera.note("02-02 5/9: Write to Groups: h5write(B, 'example.h5','foo/foobaa/B')","getdata","gitpdf",2)
coursera.note("02-02 5/9: Write to Groups: h51s('example.h5')","getdata","gitpdf",2)
coursera.note("02-02 6/9: Write a Data Set: )","getdata","gitpdf",2)
coursera.note("02-02 6/9: df=data.frame(1L:5L,seq(0,1,length.out=5),","getdata","gitpdf",2)
coursera.note("02-02 6/9: c('ab','cde','fghi','a','s'),stringsAsFactors=FALSE)","getdata","gitpdf",2)
coursera.note("02-02 6/9: h5write(df,'example.h5','df')","getdata","gitpdf",2)
coursera.note("02-02 6/9: h5ls('example.h5')","getdata","gitpdf",2)
coursera.note("02-02 7/9: Reading Data: readA=h5read('example.h5','foo/A')","getdata","gitpdf",2)
coursera.note("02-02 7/9: Reading Data: readB=h5read('example.h5','foo/foobaa/B')","getdata","gitpdf",2)
coursera.note("02-02 7/9: Reading Data: readdf=h5read('example.h5','df')","getdata","gitpdf",2)
coursera.note("02-02 8/9: writing and reading chunks: ","getdata","gitpdf",2)
coursera.note("02-02 8/9: h5write(c(12,13,14),'example.h5','foo/A',index=list(1:3,1))","getdata","gitpdf",2)
coursera.note("02-02 8/9: h5read('example.h5','foo/A')","getdata","gitpdf",2)
coursera.note("02-02 9/9: Notes and Further Resources","getdata","gitpdf",2)
coursera.note("02-02 9/9: hdf5 can be used to optimize reading/writing from disc in R","getdata","gitpdf",2)
coursera.note("02-02 9/9: The rhd5 tutorial: http://www.bioconductor.org/packages/release/bioc/vignettes/rhd5/inst/doc/rhd5.pdf","getdata","gitpdf",2)
coursera.note("02-02 9/9: The HDF group has information on hdf5 in general:","getdata","gitpdf",2)
coursera.note("02-02 9/9: http://www.hdfgroup.org/HDF5/","getdata","gitpdf",2)
coursera.note("02-03 1/10: Reading Data From the Web","getdata","gitpdf",2)
coursera.note("02-03 2/10: Webscraping: programmatically extracting data from the html code of websites","getdata","gitpdf",2)
coursera.note("02-03 2/10: How Netflix Reverse Engineered Hollywood","getdata","gitpdf",2)
coursera.note("02-03 2/10: Many websites have information you may want to programmatically read.","getdata","gitpdf",2)
coursera.note("02-03 2/10: In some cases this is against the terms of service for the website.","getdata","gitpdf",2)
coursera.note("02-03 2/10: Attempting to read too many pages too quickly can get your ip address blocked.","getdata","gitpdf",2)
coursera.note("02-03 2/10: http://en.wikipedia.org/wiki/web_scraping","getdata","gitpdf",2)
coursera.note("02-03 3/10: Example: Google Scholar","getdata","gitpdf",2)
coursera.note("02-03 3/10: scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en","getdata","gitpdf",2)
coursera.note("02-03 4/10: Getting data off webpages - readLines()","getdata","gitpdf",2)
coursera.note("02-03 4/10: con=url('http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en')","getdata","gitpdf",2)
coursera.note("02-03 4/10: htmlCode=readLines(con)","getdata","gitpdf",2)
coursera.note("02-03 4/10: close(con)","getdata","gitpdf",2)
coursera.note("02-03 5/10: Parsing with XML","getdata","gitpdf",2)
coursera.note("02-03 5/10: library(XML); url<-'...'; html<-htmlTreeParse(url,useInternalNodes=T)","getdata","gitpdf",2)
coursera.note("02-03 5/10: xpathSApply(html,'//title',xmlValue)","getdata","gitpdf",2)
coursera.note("02-03 5/10: xpathSApply(html,'//td[@id='col-citedby']',xmlValue)","getdata","gitpdf",2)
coursera.note("02-03 6/10: GET from the httr package","getdata","gitpdf",2)
clock("stop")
add.note("task dishes skillet, 2 flats, 4 bowls, 6 cups.")
add.note2("health","woke up 9:30")
add.note2("health","flunked hydration test")
add.note2("health","shaved")
add.article("Scott Brian","9 Essential Rules For Making The Perfect Cup Of Tea","Buzzfeed","buzzfeed.com","2014-02-06","Turtle")
artiquote(545,"Essentially, this is a guide to not offending a British person.")
artiquote(545,"1. Do not leave the kettle alone when boiling tea.")
artiquote(545,"You are making a British cup of tea. You are an ambassador for the tea.")
artiquote(545,"If you aren’t ready, you have failed.")
artiquote(545,"2. Do not brew the tea for fewer than 3 minutes.")
artiquote(545,"If you squeeze, dip, stir or wring it during the brewing period you have offended a British person.")
artiquote(545,"3. Do not leave the teabag in the mug.")
artiquote(545,"5. NEVER put the sugar teaspoon into the tea.")
add.article("","How to Make Tea","WikiHow","wikihow.com","2015-01-20","Turtle")
add.article("Laura Sydell","At 90, She's Designing Tech For Aging Boomers","NPR","npr.org","2015-01-19","Editor's Picks - NPR")
add.article("Richard Adhikari","Keeping Score in the Google vs. Microsoft Zero-Day Games","Tech News World","technewsworld.com","2015-01-20","Editor's Picks - Tech News World")
artiquote(548,"Google's security team typically set a clock after informing a company of a flaw, ")
artiquote(548,"allowing what it considers to be a reasonable period of time to fix it ")
artiquote(548,"before spilling the beans.")
add.article("Patrick Allan","How to Stop Overreacting to Everything","Lifehacker","lifehacker.com","2015-01-19","Editor's Picks - Lifehacker")
artiquote(549,"Know the Difference Between Reacting and Overreacting")
artiquote(549,"Identify Your Triggers")
artiquote(549,"Breathe Before You Do Anything
")
artiquote(549,"Listen to Your Personal Control Tower")
artiquote(549,"Gain Perspective on the Past and the Future")
artiquote(549,"Don't Bottle Up Your Emotions")
add.article("Kristin Wong","How Should I Talk to My Spouse About Our Different Financial Habits?","Lifehacker","lifehacker.com","2015-01-19","Editor's Picks - Lifehacker")
artiquote(550,"Know Your Spouse's Money Philosophy")
artiquote(550,"Money avoidance: 'People with this trait believe that money is bad, that rich people are greedy and that they don't deserve money.'")
artiquote(550,"Money worship: 'These folks are convinced that more money will solve all of their problems, that there will never be enough'")
artiquote(550,"Money status: 'Status lovers believe that owning the newest and best things confers status.'")
artiquote(550,Money vigilance: 'People with this trait embrace frugality, the importance of saving and being discreet about how much they have or make.'")
artiquote(550,"Money vigilance: 'People with this trait embrace frugality, the importance of saving and being discreet about how much they have or make.'")
artiquote(550,"Money vigilance might not seem like a negative trait. But Klontz explains that...")
artiquote(550,"..., taken to the extreme, it can still cause financial problems.")
artiquote(550,"Admit how your own financial behavior gets in your way sometimes.")
artiquote(550,"Hold a Money Meeting")
artiquote(550,"Establish Ground Rules")
artiquote(550,"Set a timer for 2 minutes, and let the speaker air his or her concerns until it goes off.")
artiquote(550,"If things get heated, take a 20-minute break and try again, sticking to facts and feelings.")
artiquote(550,"Pick Your Topics of Discussion")
artiquote(550,"Your current financial situation: ")
artiquote(550,"Your financial dreams and goals:")
artiquote(550,"Your strategies:")
artiquote(550,"Subtly Suggest Better Habits")
artiquote(550,"Consider Both Combined and Separate Accounts")
artiquote(550,"it's not easy to bring up the discussion")
add.article("Herbert Lui","How to Use Board Games to Improve Your Real Life","Lifehacker","lifehacker.com","2015-01-19","Editor's Picks - Lifehacker")
add.note("people","Why am I so annoyed that Alissa's in the kitchen?")
add.coursera
coursera.note
print(tail(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv"),3))
coursera.note("02_03 6/10: library(httr); html2=GET(url)","getdata","gitpdf",2)
coursera.note("02_03 6/10: content2 = content(html2,as='text')","getdata","gitpdf",2)
add.note2("health","I think last night's sleepiness/dehydration, hunger, sickness and frustration...")
add.note2("health","...made it difficult to get started working today.")
add.note("schedule: spent way too long playing chess today.")
coursera.note("02_03 6/10: parsedHtml=htmlParse(content2, asText=TRUE)","getdata","gitpdf",2)
add.note("work performance: mixing rstudio notes, gitpdf notes, and rstudio experimentation")
add.note2
coursera.note("02_03 6/10: xpathSApply(parsedHtml,'//title',xmlValue)","getdata","gitpdf",2)
coursera.note("02_03 7/10: Get from the httr package","getdata","gitpdf",2)
coursera.note("02_03 7/10: library(httr); html2=GET(url)","getdata","gitpdf",2)
coursera.note("02_03 7/10: content2=content(html2,as='text')","getdata","gitpdf",2)
coursera.note("02_03 7/10: parsedHtml = htmlParse(content2,asText=TRUE)","getdata","gitpdf",2)
coursera.note("02_03 7/10: xpathSApply(parsedHtml,'//title',xmlValue)","getdata","gitpdf",2)
coursera.note("02_03 7/10: Accessing website with passwords","getdata","gitpdf",2)
coursera.note("02_03 7/10: pg1=GET('http://httpbin.org/basic-auth/user/passwd')","getdata","gitpdf",2)
coursera.note("02_03 7/10: Response [http://httpbin.org/basic-auth/user/passwd]","getdata","gitpdf",2)
coursera.note("02_03 7/10: status 401, content-type:","getdata","gitpdf",2)
coursera.note("02_03 7/10: http://cran.r-project.org/web/packages/httr/httr.pdf","getdata","gitpdf",2)
coursera.note("02_03 8/10: Accessing websites with passwords","getdata","gitpdf",2)
coursera.note("02_03 8/10: pg2=GET('http://httpbin.org/basic-auth/user/passwd'","getdata","gitpdf",2)
coursera.note("02_03 8/10: ,authenticate('user','passwd'))","getdata","gitpdf",2)
coursera.note("02_03 8/10: Response [http://httpbin.org/basic-auth/user/passwd]","getdata","gitpdf",2)
coursera.note("02_03 8/10: status 200; content-type: application/json","getdata","gitpdf",2)
coursera.note("02_03 8/10: {'authenticated': true, 'user':'user'}","getdata","gitpdf",2)
coursera.note("02_03 8/10: names(pg2)","getdata","gitpdf",2)
coursera.note("02_03 9/10: using handles","getdata","gitpdf",2)
coursera.note("02_03 9/10: google=handle('http://google.com')","getdata","gitpdf",2)
coursera.note("02_03 9/10: pg1=GET(handle=google,path='/')","getdata","gitpdf",2)
coursera.note("02_03 9/10: pg2=GET(handle=google,path='search')","getdata","gitpdf",2)
coursera.note("02_03 10/10: Notes and further resources","getdata","gitpdf",2)
coursera.note("02_03 10/10: examples http://www.r-bloggers.com/?s=Web+Scraping","getdata","gitpdf",2)
coursera.note("02_03 10/10: examples http://www.cran.r-project.org/web/packages/httr/httr.pdf","getdata","gitpdf",2)
coursera.note("02_03 10/10: see later lectures on APIs","getdata","gitpdf",2)
coursera.note("02_01 1/10: Reading data from APIs","getdata","gitpdf",2)
coursera.note("02_01 2/10: Application programming interfaces","getdata","gitpdf",2)
coursera.note("02_01 2/10: https://dev.twitter.com/docs/api/1/get/blocks/blocking","getdata","gitpdf",2)
coursera.note("02_01 3/10: Creating an application","getdata","gitpdf",2)
coursera.note("02_01 3/10: https://dev.twitter.com/apps","getdata","gitpdf",2)
coursera.note("02_01 4/10: Creating an application","getdata","gitpdf",2)
coursera.note("02_01 4/10: https://dev.twitter.com/apps","getdata","gitpdf",2)
coursera.note("02_01 5/10: Creating an application","getdata","gitpdf",2)
coursera.note("02_01 5/10: https://dev.twitter.com/apps","getdata","gitpdf",2)
coursera.note("02_01 6/10: Accessing twitter from R","getdata","gitpdf",2)
coursera.note("02_01 6/10: myapp=oaut_app('twitter', key='yourConsumerKeyHere',","getdata","gitpdf",2)
coursera.note("02_01 6/10: 'secret=yourConsumerSecretHere')","getdata","gitpdf",2)
coursera.note("02_01 6/10: sig=sign_oauth1.0(myapp,token=<yourtoken>, token_secret=<yourTokenSecret>)","getdata","gitpdf",2)
coursera.note("02_01 6/10: homeTL=GET('https://api.twitter.com/1.1/statuses/home_timeline.json',sig)","getdata","gitpdf",2)
coursera.note("02_01 7/10: Converting the json object","getdata","gitpdf",2)
coursera.note("02_01 7/10: json1=content(homeTL)","getdata","gitpdf",2)
coursera.note("02_01 7/10: json2=jsonlite::fromJSON(toJSON(json1))","getdata","gitpdf",2)
coursera.note("02_01 7/10: json2[1,1:4]","getdata","gitpdf",2)
coursera.note("02_01 8/10: How Did I know what URL to use?","getdata","gitpdf",2)
coursera.note("02_01 8/10: https://dev.twitter.com/docs/api/1.1/get/search/tweets","getdata","gitpdf",2)
coursera.note("02_01 9/10: In general look at the documentation","getdata","gitpdf",2)
coursera.note("02_01 9/10: https://dev.twitter.com/docs/api/1.1/overview","getdata","gitpdf",2)
coursera.note("02_01 10/10: In general look at the documentation","getdata","gitpdf",2)
coursera.note("02_01 10/10: httr allows GET, POST, PUT, DELETE requests if you are authorized","getdata","gitpdf",2)
coursera.note("02_01 10/10: you can authenticate with a user name or password","getdata","gitpdf",2)
coursera.note("02_01 10/10: most modern APIs use something like oauth","getdata","gitpdf",2)
coursera.note("02_01 10/10: httr works well with Facebook, Google, Twitter, Github, etc.","getdata","gitpdf",2)
coursera.note("02_04 1/10: Reading data from APIs","getdata","gitpdf",2)
coursera.note("02_04 2/10: Application programming interfaces","getdata","gitpdf",2)
coursera.note("02_01 2/10: https://dev.twitter.com/docs/api/1/get/blocks/blocking","getdata","gitpdf",2)
coursera.note("02_04 2/10: https://dev.twitter.com/docs/api/1/get/blocks/blocking","getdata","gitpdf",2)
coursera.note("02_04 3/10: Creating an application","getdata","gitpdf",2)
coursera.note("02_01 3/10: https://dev.twitter.com/apps","getdata","gitpdf",2)
coursera.note("02_01 4/10: Creating an application","getdata","gitpdf",2)
coursera.note("02_01 4/10: https://dev.twitter.com/apps","getdata","gitpdf",2)
coursera.note("02_01 5/10: Creating an application","getdata","gitpdf",2)
coursera.note("02_01 5/10: https://dev.twitter.com/apps","getdata","gitpdf",2)
coursera.note("02_01 6/10: Accessing twitter from R","getdata","gitpdf",2)
coursera.note
as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv",colClasses="character"))
coursera<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv",colClasses="character"))
View(coursera)
coursera<-coursera<-[1:964,]
coursera<-coursera[1:964,]
View(coursera)
coursera[933,1]
coursera[933,2]
coursera[933,2]<-"02_04 1/10: Reading data from APIs"
coursera[934,2]
coursera[934,2]<-"02_04 2/10: Application programming interfaces"
coursera[935,2]
coursera[935,2]<-"02_04 2/10: https://dev.twitter.com/docs/api/1/get/blocks/blocking"
coursera[936,2]
coursera[936,2]<-"02_04 3/10: Creating an application"
coursera.note
X<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/coursera.csv",colClasses="character"))
View(X)
X<-X[1:959,]
View(coursera)
write.csv(X, "C:/Users/Josh/Documents/CSV Personal/coursera.csv", row.names=FALSE)
rm(X,coursera)
rm(note,obs)
rm(Time,category,course,week)
add.note("Internet went down on me, second time in a half hour. Not affecting Alissa.")
